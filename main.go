package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/Penpen7/shellcheck-actions/reviewdog"
	"github.com/Penpen7/shellcheck-actions/shellcheck"
)

func main() {
	response := shellcheck.Response{}
	err := json.NewDecoder(os.Stdin).Decode(&response)
	if err != nil {
		log.Fatal(err)
	}
	output := reviewdog.AutoGenerated{}
	output.Source = reviewdog.Source{"shellcheck", "http://example.com"}
	output.Severity = "WARNING"
	for _, v := range response {
		diagnostic := reviewdog.Diagnostics{}
		suggestions := []reviewdog.Suggestions{}
		for _, suggestion := range v.Fix.Replacements {
			test := reviewdog.Suggestions{
				Range: reviewdog.Range{
					Start: reviewdog.Start{
						Line:   suggestion.Line,
						Column: suggestion.Column,
					},
					End: reviewdog.End{
						Line:   suggestion.EndLine,
						Column: suggestion.EndColumn,
					},
				},
				Text: suggestion.Replacement,
			}
			suggestions = append(suggestions, test)
		}
		location := reviewdog.Location{
			Path: v.File,
			Range: reviewdog.Range{
				Start: reviewdog.Start{
					Line:   v.Line,
					Column: v.Column,
				},
				End: reviewdog.End{
					Line:   v.EndLine,
					Column: v.EndColumn,
				},
			},
		}
		diagnostic.Message = v.Message
		diagnostic.Location = location
		diagnostic.Suggestions = suggestions
		diagnostic.Severity = strings.ToUpper(v.Level)
		diagnostic.Code = reviewdog.Code{
			Value: strconv.Itoa(v.Code),
		}
		output.Diagnostics = append(output.Diagnostics, diagnostic)
	}
	b, err := json.Marshal(output)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(string(b))
}
